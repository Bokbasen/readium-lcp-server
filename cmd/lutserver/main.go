/*
 * Copyright (c) 2016-2018 Readium Foundation
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation and/or
 *     other materials provided with the distribution.
 *  3. Neither the name of the organization nor the names of its contributors may be
 *     used to endorse or promote products derived from this software without specific
 *     prior written permission
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 *  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package main

import (
	"net/http"
	"os"
	"path/filepath"
	"runtime"
	"strconv"
	"time"

	"github.com/readium/readium-lcp-server/controller/common"
	"github.com/readium/readium-lcp-server/lib/logger"
	"github.com/readium/readium-lcp-server/model"

	"github.com/readium/readium-lcp-server/controller/lutserver"
	"github.com/readium/readium-lcp-server/lib/cron"
)

func main() {
	// Start logger
	log := logger.New()
	log.Printf("RUNNING UTIL SERVER")

	var dbURI, configFile string
	var err error

	if configFile = os.Getenv("READIUM_FRONTEND_CONFIG"); configFile == "" {
		configFile = "config.yaml"
	}
	cfg, err := common.ReadConfig(configFile)
	if err != nil {
		panic(err)
	}

	log.Printf("LCP server = %s", cfg.LcpServer.PublicBaseUrl)
	log.Printf("using login  %s ", cfg.LcpUpdateAuth.Username)
	// use a sqlite db by default
	if dbURI = cfg.FrontendServer.Database; dbURI == "" {
		dbURI = "sqlite3://file:frontend.sqlite?cache=shared&mode=rwc"
	}

	stor, err := model.SetupDB(dbURI, log, true)
	if err != nil {
		panic("Error setting up the database : " + err.Error())
	}
	err = stor.AutomigrateForFrontend()
	if err != nil {
		panic("Error migrating database : " + err.Error())
	}

	common.HandleSignals()

	server := New(cfg, log, stor)
	log.Printf("Frontend webserver for LCP running on " + cfg.FrontendServer.Host + ":" + strconv.Itoa(cfg.FrontendServer.Port))

	if err := server.ListenAndServe(); err != nil {
		log.Printf("Error " + err.Error())
	}
}

// New creates a new webserver (basic user interface)
func New(
	cfg common.Configuration,
	log logger.StdLogger,
	store model.Store) *common.Server {

	tcpAddress := cfg.FrontendServer.Host + ":" + strconv.Itoa(cfg.FrontendServer.Port)

	staticFolderPath := cfg.FrontendServer.Directory
	if staticFolderPath == "" {
		_, file, _, _ := runtime.Caller(0)
		here := filepath.Dir(file)
		staticFolderPath = filepath.Join(here, "../frontend/manage")
	}

	filepathConfigJs := filepath.Join(staticFolderPath, "config.js")
	fileConfigJs, err := os.Create(filepathConfigJs)
	if err != nil {
		panic(err)
	}

	defer func() {
		if err := fileConfigJs.Close(); err != nil {
			panic(err)
		}
	}()

	configJs := `
	// This file is automatically generated, and git-ignored.
	// To ignore your local changes, use:
	// git update-index --assume-unchanged frontend/manage/config.js
	window.Config = {`
	configJs += "\n\tfrontend: {url: '" + cfg.FrontendServer.PublicBaseUrl + "' },\n"
	configJs += "\tlcp: {url: '" + cfg.LcpServer.PublicBaseUrl + "', user: '" + cfg.LcpUpdateAuth.Username + "', password: '" + cfg.LcpUpdateAuth.Password + "'},\n"
	configJs += "\tlsd: {url: '" + cfg.LsdServer.PublicBaseUrl + "', user: '" + cfg.LsdNotifyAuth.Username + "', password: '" + cfg.LsdNotifyAuth.Password + "'}\n}"

	log.Printf("manage/index.html config.js:")
	log.Printf(configJs)

	fileConfigJs.WriteString(configJs)
	log.Printf("... written in %s", filepathConfigJs)

	log.Printf("Static folder : %s", staticFolderPath)
	serverRouter := common.CreateServerRouter(staticFolderPath)

	server := &common.Server{
		Server: http.Server{
			Handler:        serverRouter.N,
			Addr:           tcpAddress,
			WriteTimeout:   15 * time.Second,
			ReadTimeout:    15 * time.Second,
			MaxHeaderBytes: 1 << 20,
		},
		Log: log,
		Cfg: cfg,
		ORM: store}

	// Cron, get license status information
	cron.Start(5 * time.Minute)
	// using Method expression instead of function
	cron.Every(10).Minutes().Do((*common.Server).FetchLicenseStatusesFromLSD)

	apiURLPrefix := "/api/v1"

	//
	//  repositories of master files
	//
	repositoriesRoutesPathPrefix := apiURLPrefix + "/repositories"
	repositoriesRoutes := serverRouter.R.PathPrefix(repositoriesRoutesPathPrefix).Subrouter().StrictSlash(false)
	//
	server.HandleFunc(repositoriesRoutes, "/master-files", lutserver.GetRepositoryMasterFiles).Methods("GET")
	//
	// dashboard
	//
	server.HandleFunc(serverRouter.R, "/dashboardInfos", lutserver.GetDashboardInfos).Methods("GET")
	server.HandleFunc(serverRouter.R, "/dashboardBestSellers", lutserver.GetDashboardBestSellers).Methods("GET")
	//
	// publications
	//
	publicationsRoutesPathPrefix := apiURLPrefix + "/publications"
	publicationsRoutes := serverRouter.R.PathPrefix(publicationsRoutesPathPrefix).Subrouter().StrictSlash(false)
	//
	server.HandleFunc(serverRouter.R, publicationsRoutesPathPrefix, lutserver.GetPublications).Methods("GET")
	//
	server.HandleFunc(serverRouter.R, publicationsRoutesPathPrefix, lutserver.CreatePublication).Methods("POST")
	//
	server.HandleFunc(serverRouter.R, "/PublicationUpload", lutserver.UploadEPUB).Methods("POST")
	//
	server.HandleFunc(publicationsRoutes, "/check-by-title", lutserver.CheckPublicationByTitle).Methods("GET")
	//
	server.HandleFunc(publicationsRoutes, "/{id}", lutserver.GetPublication).Methods("GET")
	server.HandleFunc(publicationsRoutes, "/{id}", lutserver.UpdatePublication).Methods("PUT")
	server.HandleFunc(publicationsRoutes, "/{id}", lutserver.DeletePublication).Methods("DELETE")
	//
	// user functions
	//
	usersRoutesPathPrefix := apiURLPrefix + "/users"
	usersRoutes := serverRouter.R.PathPrefix(usersRoutesPathPrefix).Subrouter().StrictSlash(false)
	//
	server.HandleFunc(serverRouter.R, usersRoutesPathPrefix, lutserver.GetUsers).Methods("GET")
	//
	server.HandleFunc(serverRouter.R, usersRoutesPathPrefix, lutserver.CreateUser).Methods("POST")
	//
	server.HandleFunc(usersRoutes, "/{id}", lutserver.GetUser).Methods("GET")
	server.HandleFunc(usersRoutes, "/{id}", lutserver.UpdateUser).Methods("PUT")
	server.HandleFunc(usersRoutes, "/{id}", lutserver.DeleteUser).Methods("DELETE")
	// get all purchases for a given user
	server.HandleFunc(usersRoutes, "/{user_id}/purchases", lutserver.GetUserPurchases).Methods("GET")

	//
	// purchases
	//
	purchasesRoutesPathPrefix := apiURLPrefix + "/purchases"
	purchasesRoutes := serverRouter.R.PathPrefix(purchasesRoutesPathPrefix).Subrouter().StrictSlash(false)
	// get all purchases
	server.HandleFunc(serverRouter.R, purchasesRoutesPathPrefix, lutserver.GetPurchases).Methods("GET")
	// create a purchase
	server.HandleFunc(serverRouter.R, purchasesRoutesPathPrefix, lutserver.CreatePurchase).Methods("POST")
	// update a purchase
	server.HandleFunc(purchasesRoutes, "/{id}", lutserver.UpdatePurchase).Methods("PUT")
	// get a purchase by purchase id
	server.HandleFunc(purchasesRoutes, "/{id}", lutserver.GetPurchase).Methods("GET")
	// get a license from the associated purchase id
	server.HandleFunc(purchasesRoutes, "/{id}/license", lutserver.GetPurchasedLicense).Methods("GET")
	//
	// licences
	//
	licenseRoutesPathPrefix := apiURLPrefix + "/licenses"
	licenseRoutes := serverRouter.R.PathPrefix(licenseRoutesPathPrefix).Subrouter().StrictSlash(false)
	//
	// get a list of licenses
	server.HandleFunc(serverRouter.R, licenseRoutesPathPrefix, lutserver.GetFilteredLicenses).Methods("GET")
	// get a license by id
	server.HandleFunc(licenseRoutes, "/{license_id}", lutserver.GetLicense).Methods("GET")

	return server
}
