import { Injectable }    from '@angular/core';
import {  Http } from '@angular/http';
import 'rxjs/add/operator/toPromise';
// import { User } from './user';
// import { Purchase } from './purchase';
import * as  lsd  from './lsd-structs';

declare var Config: any; //  this comes from the autogenerated config.js file
@Injectable()
export class LsdService {
  private lsdServer = Config.lsd.url; // from Config
  // private headers = new Headers ({'Content-Type': 'application/json'});

  static getParamsFor(id: string, name: string) {
      let params = '';
      if ( id !== undefined ) {
          params += '?id=' + id;
          if ( name !== undefined ) {
              params += '&name=' + name;
          }
      } else if ( name !== undefined ) {
          params += '?name=' + name;
      }
      return params;
  }

  static getParams(enddate: Date, id: string, name: string) {
      let p = LsdService.getParamsFor(id, name);
      if (p === '') {
        return '?end=' + enddate.toISOString();
      } else {
        p += '&end=' + enddate.toISOString();
        return p;
      }
  }

  constructor (private http: Http) { }

  getStatus(licenseID: string, id: string | undefined, name: string | undefined): Promise<lsd.LicenseStatus> {
    return this.http.get(this.lsdServer + '/licenses/' + licenseID + '/status' + LsdService.getParamsFor(id, name) )
      .toPromise()
      .then(function (response) {
           if ((response.status === 200) || (response.status === 201)) {
               return response.json();
            } else {
            throw 'Error in getStatus(License Status Document); ' + response.status + response.text;
          }
      })
      .catch(this.handleError);
  }

  returnLoan(licenseID: string, id: string | undefined, name: string | undefined): Promise<lsd.LicenseStatus> {
    return this.http.put(this.lsdServer + '/licenses/' + licenseID + '/return'  + LsdService.getParamsFor(id, name), undefined )
      .toPromise()
      .then(function (response) {
           if ((response.status === 200) || (response.status === 201)) {
               return response.json();
            } else {
                throw 'Error in returnLoan(License Status Document); ' + response.status + response.text;
          }
      })
      .catch(this.handleError);
  }

  renewLoan(licenseID: string, endLicense: Date, id: string | undefined, name: string | undefined): Promise<lsd.LicenseStatus> {
    return this.http.put(this.lsdServer + '/licenses/' + licenseID + '/renew'  + LsdService.getParams(endLicense, id, name), undefined )
      .toPromise()
      .then(function (response) {
           if ((response.status === 200) || (response.status === 201)) {
               return response.json();
            } else if ((response.status === 400)) {
                let obj = response.json();
                throw 'Error in renewLoan(License Status Document): ' + obj.detail + '\n' + response.status + response.text;
            } else {
            throw 'Error in renewLoan(License Status Document); ' + response.status + response.text;
          }
      })
      .catch(this.handleRenewError);
  }


  private handleError(error: any): Promise<any> {
    console.error('An error occurred (lsd-service)', error);
    return Promise.reject(error.message || error);
  }

  private handleRenewError(error: any): Promise<any> {
    console.error('Error renew (lsd-service)', error);
    return Promise.reject(error);
  }
}
